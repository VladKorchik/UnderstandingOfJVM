public class JvmComprehension { //0

    public static void main(String[] args) { //0.1
        int i = 1;                      // 1
        Object o = new Object();        // 2
        Integer ii = 2;                 // 3
        printAll(o, i, ii);             // 4
        System.out.println("finished"); // 7
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5
        System.out.println(o.toString() + i + ii);  // 6
    }
}

// 0. Поиск класса JvmComprehension (Loading) -> Подготовка класса к выполнению (Linking) ->
//          Инициализация класса (initialization) -> загрузка класса в metaspace
// 0.1 Создание фрейма
// 1. Инициализация переменной i. Переменная будет хранится в стеке, созданном в 0.1
// 2.  Создание объекта o. Объект создаётся и кладёдтся в кучу (heap). Во фрейм помещается ссылка на этот объект
// 3. Создаётся объект типа Integer. Т.к. это не примитив, он также помещается в кучу, во фрейм клаёдсят ссылка на него
// 4. создаётся новый фрейм, в который передаются ссылки на объекты, лежащие в куче.
// 5. JVM делает тоже самое, что и в пункте 3, но с тем отличием, что в дальнейшем созданный объект нигде не используется,
//            поэтому он будет удалён сборщиком мусора при первом же его появлении.
// 6.1 При выполнении команды "System.out.println" будет создан новый фрейм. В него будут переданы ссылки на объекты
//            из кучи и ссылка, созданная в 6.2
// 6.2 При вызове метода "toString()" у объекта "о" будет создан ещё один фрейм. В куче появится строкое представление
//      объекта "о", линк на который будет передан во фрейм, созданный в п. 6.1
// 6.3 При следуеющем запуске сборщика мусора все созданные ранее объекты будут удалены.
// 7. Снова создаётся фрейм, в который передаётся строка "finished"
